<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beans.roaststars.model.mapper.CafeMapper">
	
	<!-- SQL 기본 select -->
 	<sql id="selectCafe">
 		SELECT cafe_no,cafe_name,cafe_loc,cafe_pic,cafe_info,cafe_tel,id
 		FROM   cafe
 	</sql>

   <!-- has a 관계를 위한 cafeOperatingTime resultMap 
       : CafeOperatingTimeVO has a CafeVO
         CafeVO has a UserVO
   -->   
   <resultMap type="cafeOperatingTimeVO" id="CafeRM" >
      <result property="cafeVO.userVO.id" column="id"/>
      <result property="cafeVO.cafeNo" column="cafe_no"/>
      <result property="cafeVO.cafeName" column="cafe_name"/>
      <result property="cafeVO.cafeLoc" column="cafe_loc"/>
      <result property="cafeVO.cafePic" column="cafe_pic"/>
      <result property="cafeVO.cafeInfo" column="cafe_info"/>
      <result property="cafeVO.cafeTel" column="cafe_tel"/>
   </resultMap>
   
	<!-- 카페 사장님의 구체적인 정보를 알고싶을 때는
		 아래의 resultMap을 사용하세요! -->
	<resultMap type="cafeOperatingTimeVO" id="CafeAndManagerRM" extends="CafeRM">
		<result property="cafeVO.userVO.password" column="password"/>
		<result property="cafeVO.userVO.name" column="name"/>
		<result property="cafeVO.userVO.nickname" column="nickname"/>
		<result property="cafeVO.userVO.tel" column="tel"/>
		<result property="cafeVO.userVO.address" column="address"/>
		<result property="cafeVO.userVO.businessName" column="business_name"/>
		<result property="cafeVO.userVO.businessPic" column="business_pic"/>
		<result property="cafeVO.userVO.businessNo" column="business_no"/>
		<result property="cafeVO.userVO.enabled" column="enabled"/>
	</resultMap>
   
   	<!-- 카페 특성 값 resultMap -->
	<resultMap type="propertyVO" id="propertyCafeRM">
 		<result column="cafe_no" property="cafeVO.cafeNo"/>
 		<result column="cafe_name" property="cafeVO.cafeName"/>
 		<result column="cafe_loc" property="cafeVO.cafeLoc"/>
 		<result column="cafe_pic" property="cafeVO.cafePic"/>
 		<result column="cafe_info" property="cafeVO.cafeInfo"/>
 		<result column="cafe_tel" property="cafeVO.cafeTel"/>
 		<result column="id" property="cafeVO.userVO.id"/>
 	</resultMap>

   <!-- cafeNo로 카페정보 조인하지않고 찾기 -->
   <select id="findcafeByNoNotJoin" resultType="cafeVO">
       <include refid="selectCafe"/>
       where cafe_no=#{value}
   </select>
   
   <!-- cafe_no로 cafeVO 정보 반환받기(+userVO까지) -->
   <select id="findCafeByCafeNo" resultMap="CafeRM" parameterType="string">
      SELECT  r.id, c.cafe_no, o.weekday_time, o.weekend_time, o.holiday_time,
              c.cafe_name, c.cafe_loc, c.cafe_pic, c.cafe_info, c.cafe_tel,
              r.password, r.name, r.nickname, r.tel, r.address, r.business_name,
              r.business_pic, r.business_no, r.enabled
      FROM    rs_user r, cafe c, operating_time o
      WHERE   r.id = c.id AND c.cafe_no = o.cafe_no AND c.cafe_no=#{value}
   </select>
   
   <!-- 지역 기준으로 카페 리스트 반환 -->
    <select id="findListByLoc" resultMap="CafeRM" parameterType="string">
       select cafe_no, cafe_name, cafe_loc, cafe_pic, cafe_info, cafe_tel, id
       from   cafe
       where  cafe_loc like '%' || #{value} || '%'
    </select>
 	
 	<!-- 특성값으로 카페리스트 정렬 -->
 	<select id="cafeListSortByProperty" resultMap="propertyCafeRM">
 		select c.cafe_no, c.cafe_name, c.cafe_loc, c.cafe_pic, c.cafe_info, c.cafe_tel, c.id, p.taste, p.service, p.mood, p.diversity, p.price
 		from   cafe c, property p
 		where  c.cafe_no = p.cafe_no and c.cafe_loc like '%' || #{loc} || '%'
 		order by ${arrOption[0]} desc, ${arrOption[1]} desc, ${arrOption[2]} desc
 	</select>

    <!-- 카페 등록하기 -->
    <insert id="registerCafe" parameterType="cafeVO">
	    <selectKey keyProperty="cafeNo" resultType="string" order="BEFORE">
	    select cafe_seq.nextval from dual
	    </selectKey>
	    insert into cafe(cafe_no, cafe_name, cafe_loc, cafe_pic, cafe_info, cafe_tel, id)
	    values(#{cafeNo},#{cafeName},#{cafeLoc},#{cafePic,jdbcType=VARCHAR},#{cafeInfo},#{cafeTel},#{userVO.id})
    </insert>
    
    <!-- 카페 등록 시, 특성 테이블에 해당 카페 넘버 row 추가하기 -->
    <insert id="registerCafeProperty" parameterType="string">
    	INSERT INTO property(cafe_no, service, taste, price, mood, diversity) 
    	VALUES(#{value}, 0,0,0,0,0)
    </insert>
    
    <!-- 카페운영시간 등록하기 -->
    <insert id="registerCafeOperatingTime" parameterType="cafeOperatingTimeVO">
    insert into operating_time(cafe_no,weekday_time,weekend_time,holiday_time)
    values(#{cafeVO.cafeNo},#{weekdayTime},#{weekendTime},#{holidayTime})
    </insert>
    
     <!-- 카페 번호로 카페 특성 점수까지 반환받기 -->
 	<select id="findCafeAndPropertyByCafeNo" resultMap="propertyCafeRM">
 		SELECT p.cafe_no, p.service, p.taste, p.price, p.mood, p.diversity
		FROM   cafe c, property p
		WHERE  c.cafe_no = p.cafe_no AND p.cafe_no=#{value}
 	</select>
 	<!-- 아이디로 카페목록 불러오기 -->
	<select id="getCafeList" resultType="cafeVO">
		<include refid="selectCafe"/>
		where id=#{value}
	</select>

	<!-- 카페 정보 수정하기 1 -->
	<update id="updateCafe" parameterType="cafeVO">
		update cafe set cafe_name=#{cafeName}, cafe_loc=#{cafeLoc},cafe_tel=#{cafeTel},cafe_pic =#{cafePic,jdbcType=VARCHAR}
		where cafe_no = #{cafeNo}
	</update>
	
	<!-- 카페 정보 수정하기 2 : 운영 시간 -->
	<update id="updateCafeOperatingTime" parameterType="cafeOperatingTimeVO">
		update operating_time set weekday_time=#{weekdayTime}, weekend_time=#{weekendTime},holiday_time=#{holidayTime}
		where cafe_no=#{cafeVO.cafeNo}
	</update>

	<!-- 카페 삭제 -->
	<delete id="deleteCafe" parameterType="string">
		delete from cafe where cafe_no=#{value}
	</delete>
	
	<!-- 메뉴 등록 1 : menu table에 등록-->
	<insert id="updateMenu" parameterType="menuVO">
		insert into menu(menu_name,menu_price,cafe_no) 
		values(#{menuName},#{menuPrice},#{cafeVO.cafeNo})
	</insert>
	
	<!-- 메뉴 등록 2 : menu_kind table에 등록-->
	<insert id="updateMenuKind" parameterType="MenuKindVO">
		insert into menu_kind(menu_name,cafe_no,espresso) 
		values(#{menuVO.menuName},#{menuVO.cafeVO.cafeNo},#{espresso})
	</insert>
   
   <!-- menuKindVO has a menuVO 
    	&& menuVO has a cafeVO
    	: 예울 - cafeNo만 필요한데 나머지 정보는 왜 넣은지 모르겠음..-->
   <resultMap type="menuKindVO" id="menuKindRM">
   	  <result property="menuVO.menuName" column="menu_name"/>	
   	  <result property="menuVO.menuPrice" column="menu_price"/>
   	  <result property="menuVO.cafeVO.cafeNo" column="cafe_no"/>
   	  <result property="menuVO.cafeVO.cafeName" column="cafe_name"/>
   	  <result property="menuVO.cafeVO.cafeLoc" column="cafe_loc"/>
   	  <result property="menuVO.cafeVO.cafePic" column="cafe_pic"/>
   	  <result property="menuVO.cafeVO.cafeInfo" column="cafe_info"/>
   	  <result property="menuVO.cafeVO.cafeTel" column="cafe_tel"/>
   </resultMap>
   
   <!-- 카페 번호로 메뉴 리스트 찾기 -->
   <select id="updateMenuList" resultMap="menuKindRM">
  	  SELECT   m.menu_name, m.menu_price, c.cafe_no,
               c.cafe_name, c.cafe_loc, c.cafe_pic, c.cafe_info, c.cafe_tel,
               k.espresso
      FROM     cafe c, menu m, menu_kind k
      WHERE    m.cafe_no = c.cafe_no AND m.cafe_no = k.cafe_no
      		   AND m.menu_name =k.menu_name AND c.cafe_no=#{value}
      ORDER BY k.espresso DESC, m.menu_price, k.menu_name DESC
   </select>
   
   <!-- 메뉴 이름 중복 체크 -->
   <select id="menuNameCheck" resultType="int">
  	   select count(*)
	   from cafe c, menu m 
	   where m.cafe_no = c.cafe_no and c.cafe_no=#{cafeNo} and m.menu_name=#{menuName}
   </select>
   
   <!-- 메뉴 삭제 -->
   <delete id="deleteMenu">
   delete from menu where cafe_no=#{cafeNo} and menu_name=#{menuName}
   </delete>

</mapper>