<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beans.roaststars.model.mapper.ReviewMapper">
   
   <!-- has a 관계를 위한 cafeVO resultMap -->
   <resultMap type="reviewVO" id="UserAndCafeRM">
      <result property="cafeVO.cafeNo" column="cafe_no"/>
      <result property="userVO.id" column="id"/>
      <result property="userVO.password" column="password"/>
      <result property="userVO.name" column="name"/>
      <result property="userVO.nickname" column="nickname"/>
      <result property="userVO.enabled" column="enabled"/>
   </resultMap>
   
   <resultMap type="propertyVO" id="propertyRM">
   	 <result property="cafeVO.cafeNo" column="cafe_no"/>
   </resultMap>
   
      
   <!-- 카페 넘버에 해당하는 리뷰 리스트 목록 조회 -->
   <select id="findReviewListByCafeNo" resultMap="UserAndCafeRM">
      SELECT cr.cafe_no, cr.review_content, cr.review_no, cr.review_regdate, 
            u.id, u.password, u.nickname, u.enabled
      FROM   ( SELECT  row_number() over(order by review_no DESC) AS rnum,
                   c.cafe_no, r.review_content, r.review_no, r.id,
                    TO_CHAR(r.review_regdate, 'YYYY-MM-DD') AS review_regdate
              FROM    cafe c, review r
             WHERE   c.cafe_no = r.cafe_no AND c.cafe_no = #{cafeNo}) cr, rs_user u
      WHERE   cr.id = u.id AND rnum BETWEEN #{pagingBean.startRowNumber} AND #{pagingBean.endRowNumber} 
      ORDER BY cr.review_no DESC
   </select>
   
   <!-- 총 리뷰 개수 -->
   <select id="findReviewTotalCountByCafeNo" resultType="int">
      SELECT COUNT(*)
      FROM   review r
      WHERE  cafe_no = #{value}
   </select>
   
   <!-- 리뷰 번호로 리뷰 조회하기 -->
   <select id="findReviewByReviewNo" resultMap="UserAndCafeRM">
      SELECT  c.cafe_no, c.cafe_name, u.id, u.password, u.nickname, u.enabled,
            r.review_no, r.review_content, r.review_regdate
      FROM    cafe c, review r, rs_user u
      WHERE   c.cafe_no = r.cafe_no AND u.id = r.id AND review_no=#{value} 
   </select>
   
   <!-- 리뷰 등록 전, 해당 아이디로 해당 카페에 리뷰 등록 여부 확인 -->
   <select id="checkDuplicatedReview" resultType="int" parameterType="string">
		SELECT COUNT(*)
		FROM   cafe c, review r, rs_user u
		WHERE  c.cafe_no = r.cafe_no AND u.id= r.id AND r.cafe_no=#{0} AND u.id=#{1}
   </select>
   

   <!-- 리뷰 등록하기 1 (리뷰 테이블에 콘텐츠 insert) -->
   <insert id="registerReview" parameterType="ReviewVO">
      <selectKey keyProperty="reviewNo" resultType="string" order="BEFORE">
         SELECT review_seq.nextval
         FROM   dual
      </selectKey>
      INSERT INTO review(cafe_no, id, review_no, review_content, review_regdate) 
      VALUES(#{cafeVO.cafeNo}, #{userVO.id}, #{reviewNo}, #{reviewContent}, sysdate)
   </insert>
   
   <!-- 리뷰 등록하기 2 (특성 테이블에 평가값 update) -->
   <update id="updateProperty" parameterType="PropertyVO">
      UPDATE property 
      SET    service = service + #{service}, taste = taste + #{taste} , price = price + #{price}, 
            mood = mood + #{mood}, diversity = diversity + #{diversity}
      WHERE  cafe_no = #{cafeVO.cafeNo}
   </update>
   
   <!-- 리뷰 등록하기 3 (evaluated_property 테이블에 리뷰 번호에 따른 평가 정보 insert) -->
   <insert id="insertEvalProperty">
      INSERT INTO evaluated_property(review_no, service, taste, price, mood, diversity)
      VALUES(#{reviewNo}, #{propertyVO.service}, #{propertyVO.taste}, 
      			#{propertyVO.price}, #{propertyVO.mood}, #{propertyVO.diversity})
   </insert>
   
   <!-- 리뷰 삭제하기 0 (리뷰 번호로 평가 정보 조회) -->
   <select id="findPropertyByReviewNo" resultMap="propertyRM">
   	select c.cafe_no,service,taste,price,mood,diversity
	from   review r, cafe c, evaluated_property p
	where  r.cafe_no = c.cafe_no AND p.review_no = r.review_no AND p.review_no=#{value}
   </select>
   
   <!-- 리뷰 삭제하기 1 (특성 테이블에 평가값 update(rollback))-->
   <update id="rollbackProperty" parameterType="propertyVO">
      UPDATE property 
      SET    service = service - #{service}, taste = taste - #{taste} , price = price - #{price}, 
            mood = mood - #{mood}, diversity = diversity - #{diversity}
      WHERE  cafe_no = #{cafeVO.cafeNo}
   </update>
   
   <!-- 리뷰 삭제하기 2 (리뷰 테이블에서 삭제) -->
   <delete id="deleteReview">
   		DELETE FROM review WHERE review_no=#{value}
   </delete>
   
</mapper>